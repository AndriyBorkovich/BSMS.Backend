// <auto-generated />
using System;
using BSMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BSMS.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BusStationContext))]
    [Migration("20240331153524_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BSMS.Core.Entities.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("BSMS.Core.Entities.BusReview", b =>
                {
                    b.Property<int>("BusReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusReviewId"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int?>("ComfortRating")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InternetConnectionRating")
                        .HasColumnType("int");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceQualityRatioRating")
                        .HasColumnType("int");

                    b.Property<int?>("PunctualityRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SanitaryConditionsRating")
                        .HasColumnType("int");

                    b.HasKey("BusReviewId");

                    b.HasIndex("BusId");

                    b.HasIndex("PassengerId");

                    b.ToTable("BusReviews");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int?>("BusId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DriverLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.HasIndex("BusId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"));

                    b.Property<int?>("BusId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PassengerId");

                    b.HasIndex("BusId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("BusId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Stop", b =>
                {
                    b.Property<int>("StopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StopId"));

                    b.Property<int?>("PreviousStopId")
                        .HasColumnType("int");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("StopId");

                    b.HasIndex("PreviousStopId");

                    b.HasIndex("RouteId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("EndStopId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("StartStopId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EndStopId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.HasIndex("StartStopId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("TripStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TripId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("BusTrip", b =>
                {
                    b.Property<int>("BusesBusId")
                        .HasColumnType("int");

                    b.Property<int>("TripsTripId")
                        .HasColumnType("int");

                    b.HasKey("BusesBusId", "TripsTripId");

                    b.HasIndex("TripsTripId");

                    b.ToTable("BusTrip");
                });

            modelBuilder.Entity("BSMS.Core.Entities.BusReview", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Bus", "Bus")
                        .WithMany("BusReviews")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSMS.Core.Entities.Passenger", "Passenger")
                        .WithMany("BusReviews")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Driver", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Bus", "Bus")
                        .WithMany("Drivers")
                        .HasForeignKey("BusId");

                    b.HasOne("BSMS.Core.Entities.Company", "Company")
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Bus");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Passenger", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Bus", "Bus")
                        .WithMany("Passengers")
                        .HasForeignKey("BusId");

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Seat", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Bus", "Bus")
                        .WithMany("Seats")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Stop", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Stop", "PreviousStop")
                        .WithMany()
                        .HasForeignKey("PreviousStopId");

                    b.HasOne("BSMS.Core.Entities.Route", "Route")
                        .WithMany("Stops")
                        .HasForeignKey("RouteId");

                    b.Navigation("PreviousStop");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Ticket", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Stop", "EndStop")
                        .WithMany("TicketEndStops")
                        .HasForeignKey("EndStopId")
                        .IsRequired();

                    b.HasOne("BSMS.Core.Entities.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId");

                    b.HasOne("BSMS.Core.Entities.Seat", "Seat")
                        .WithOne("Ticket")
                        .HasForeignKey("BSMS.Core.Entities.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSMS.Core.Entities.Stop", "StartStop")
                        .WithMany("TicketStartStops")
                        .HasForeignKey("StartStopId")
                        .IsRequired();

                    b.Navigation("EndStop");

                    b.Navigation("Passenger");

                    b.Navigation("Seat");

                    b.Navigation("StartStop");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Trip", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusTrip", b =>
                {
                    b.HasOne("BSMS.Core.Entities.Bus", null)
                        .WithMany()
                        .HasForeignKey("BusesBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSMS.Core.Entities.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BSMS.Core.Entities.Bus", b =>
                {
                    b.Navigation("BusReviews");

                    b.Navigation("Drivers");

                    b.Navigation("Passengers");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Company", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Passenger", b =>
                {
                    b.Navigation("BusReviews");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Route", b =>
                {
                    b.Navigation("Stops");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Seat", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BSMS.Core.Entities.Stop", b =>
                {
                    b.Navigation("TicketEndStops");

                    b.Navigation("TicketStartStops");
                });
#pragma warning restore 612, 618
        }
    }
}
